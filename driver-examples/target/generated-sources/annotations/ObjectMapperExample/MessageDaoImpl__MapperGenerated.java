package ObjectMapperExample;

import com.datastax.oss.driver.api.core.PagingIterable;
import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
public class MessageDaoImpl__MapperGenerated extends DaoBase implements MessageDao {
  private static final Logger LOG = LoggerFactory.getLogger(MessageDaoImpl__MapperGenerated.class);

  private final MessagesHelper__MapperGenerated messagesHelper;

  private final PreparedStatement saveStatement;

  private final PreparedStatement retrieveAllMessagesByUserStatement;

  private MessageDaoImpl__MapperGenerated(MapperContext context,
      MessagesHelper__MapperGenerated messagesHelper, PreparedStatement saveStatement,
      PreparedStatement retrieveAllMessagesByUserStatement) {
    super(context);
    this.messagesHelper = messagesHelper;
    this.saveStatement = saveStatement;
    this.retrieveAllMessagesByUserStatement = retrieveAllMessagesByUserStatement;
  }

  @Override
  public void save(Messages product) {
    BoundStatementBuilder boundStatementBuilder = saveStatement.boundStatementBuilder();
    messagesHelper.set(product, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET);

    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public PagingIterable<Messages> retrieveAllMessagesByUser(String userFrom) {
    BoundStatementBuilder boundStatementBuilder = retrieveAllMessagesByUserStatement.boundStatementBuilder();
    NullSavingStrategy nullSavingStrategy = NullSavingStrategy.DO_NOT_SET;

    if (userFrom != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      boundStatementBuilder = boundStatementBuilder.set("userFrom", userFrom, String.class);
    }

    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, messagesHelper);
  }

  public static CompletableFuture<MessageDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      MessagesHelper__MapperGenerated messagesHelper = new MessagesHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        messagesHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `save(ObjectMapperExample.Messages)`:
      SimpleStatement saveStatement_simple = messagesHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method save(ObjectMapperExample.Messages)",
          context.getSession().getName(),
          saveStatement_simple.getQuery());
      CompletionStage<PreparedStatement> saveStatement = prepare(saveStatement_simple, context);
      prepareStages.add(saveStatement);
      // Prepare the statement for `retrieveAllMessagesByUser(java.lang.String)`:
      SimpleStatement retrieveAllMessagesByUserStatement_simple = replaceKeyspaceAndTablePlaceholders("SELECT * FROM ${keyspaceId}.${tableId} WHERE user_from = :userFrom ", context, messagesHelper);
      LOG.debug("[{}] Preparing query `{}` for method retrieveAllMessagesByUser(java.lang.String)",
          context.getSession().getName(),
          retrieveAllMessagesByUserStatement_simple.getQuery());
      CompletionStage<PreparedStatement> retrieveAllMessagesByUserStatement = prepare(retrieveAllMessagesByUserStatement_simple, context);
      prepareStages.add(retrieveAllMessagesByUserStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (MessageDao) new MessageDaoImpl__MapperGenerated(context,
              messagesHelper,
              CompletableFutures.getCompleted(saveStatement),
              CompletableFutures.getCompleted(retrieveAllMessagesByUserStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static MessageDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
